#!/bin/sh

# Run a shell in the dumpling Docker container as the host user
# with some features accessible from within the container:
#
#   * home directories
#   * users and groups
#   * ssh private key identities (e.g., for git)

set -eu

# Start the SSH authentication agent if it is not already running.
# This is useful for holding and forwarding SSH keys.
if [ -z "${SSH_AUTH_SOCK-}" ]; then
  eval "$(ssh-agent)" > /dev/null
fi

# Update Docker image unless running in Travis CI.
# Also, since a --quiet option does not exist, hide the output
# that is otherwise displayed when the local copy is up-to-date.
if [ "${CI-}" != true ]; then
  docker pull nysoag/dumpling | \
  grep -v -e '^Using default tag' -e '^Trying to pull' \
  -e '^latest' -e '^Digest' && true
fi

# Use the username of the user calling this script, via sudo or not,
# when naming and running the Docker container.
user="${SUDO_USER-$USER}"
name="${user}-dumpling"

if [ "$#" -ne 0 ]; then
  # Arguments were provided - append a unique string to create
  # a Docker container with a different name.
  name="${name}-$(uuidgen | cut -d- -f1)"
fi

# If dumpling is already running, attach to that container.
# Otherwise, start the container. Attach /home, /etc/group, /etc/passwd, 
# /srv/cifs, and the SSH authentication socket file as volumes.
# Pass working directory, authentication socket, and username env vars.

if [ -n "$(docker ps -q -f "name=${name}")" ]; then
    #lab-asst -l
    exec docker attach "$name"
else
    exec docker run -it --rm --name "$name" \
      --network host --cap-add SYS_ADMIN --cap-add DAC_READ_SEARCH \
      -v /home:/home \
      -v /etc/group:/etc/group.host:ro \
      -v /etc/passwd:/etc/passwd.host:ro \
      -v /srv/cifs:/srv/cifs:ro \
      -v "${SSH_AUTH_SOCK}":/tmp/ssh \
      -e "OLDPWD=$(pwd)" \
      -e SSH_AUTH_SOCK=/tmp/ssh \
      -e "USER=${user}" \
      -e PORT1 -e PORT2 -e PORT3 -e PORT4 -e BOLTPORT -e NEOPORT \
      nysoag/dumpling "$@"
fi
